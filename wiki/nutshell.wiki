#summary exceptions4c in a nutshell
#labels Featured

= What =

*`exceptions4c`* is an exception handling framework for C.

= Why =

Because it's way more convenient to treat errors as exceptions, rather than checking the status of the last operation.

= When =

 * *`try`*: when a block of code is aware of the possibility that some exception can be thrown within it.
 * *`finally`*: when a block of code needs to clean things up, regardless of any exception.
 * *`throw`*: when some part of the program finds an error that can't handle, or something really bad happens: division by zero, segmentation fault, etc...
 * *`catch`*: ...the flow of the program jumps to a block of code that is able to handle the error.

= Where =

Disposing resources:

 [http://exceptions4c.googlecode.com/svn/trunk/etc/example1_small.png]

Ensuring preconditions:

 [http://exceptions4c.googlecode.com/svn/trunk/etc/example2_small.png]

Recovering from errors:

 [http://exceptions4c.googlecode.com/svn/trunk/etc/example3_small.png]

= How =

 * Drop the `except4c.h` and `except4c.c` in your project.
 * *`#include`* `"except4c.h"`
 * Call `beginExceptionContext` and `endExceptionContext`

----

[http://exceptions4c.googlecode.com/svn/trunk/etc/sheep_064.png]