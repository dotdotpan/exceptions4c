#summary Exception objects

= Exceptions =

Exceptions are a means of breaking out of the normal flow of control of a code block in order to handle errors or other exceptional conditions. An exception should be thrown at the point where the error is detected; it may be handled by the surrounding code block or by any code block that directly or indirectly invoked the code block where the error occurred.

The type of exceptions a program will use are defined within the global scope of a source code file through the macro `DEFINE_EXCEPTION`:

{{{
/* stack.c */
...
DEFINE_EXCEPTION(StackException, "Stack overflow", RuntimeException);
DEFINE_EXCEPTION(StackOverflowException, "Stack overflow", StackException);
DEFINE_EXCEPTION(StackUnderflowException, "Stack underflow", StackException);
...
}}}

They can be declared in a header file through the macro `DECLARE_EXCEPTION`:

{{{
/* stack.h */
...
DECLARE_EXCEPTION(StackException);
DECLARE_EXCEPTION(StackOverflowException);
DECLARE_EXCEPTION(StackUnderflowException);
...
}}}

When defining types of exceptions, they are given a *name*, a *default message* and a *supertype* to organize them into a _pseudo-hierarchy_. These can be considered as the _compile-time_ attributes of a exception.

However, exceptions provide further information regarding the exceptional situation at _run-time`, such as:

  * An _ad hoc_ message (as opposed to the _default_ one)
  * The exact point of the program where it was thrown (source code file and line)
  * The value of the standard error code `errno` at the time the exception was thrown
  * The _cause_ of the exception, which is the previous exception (if any), when the exception was thrown from a `catch` or `finally` block
  * The specific, _run-time_ type of the exception, convenient when handling an abstract type of exceptions in a `catch` block

There is a set of global predefined exceptions built into the framework, amongst others:

 * `RuntimeException`
 * `NotEnoughMemoryException`
 * `NullPointerException`
 * `AbortException`
 * `ArithmeticException`
 * `IllegalInstructionException`
 * `BadPointerException`
 * `TerminationException`
 * `UserInterruptionException`

`RuntimeException` is the root of the exceptions pseudo-hierarchy.

----

[http://exceptions4c.googlecode.com/svn/trunk/etc/img/logo/exceptions4c_128.png]